/*
 * This file was generated by the Gradle 'init' task.
 *
 * The settings file is used to specify which projects to include in your build.
 *
 * Detailed information about configuring a multi-project build in Gradle can be found
 * in the user manual at https://docs.gradle.org/7.6.2/userguide/multi_project_builds.html
 */

rootProject.name = 'test-deploy'
include 'test'
project(':test').projectDir = file('../../git-submodule/upstream/plugins/test')


includeBuild("../../maven-deploy-runtime/")

gradle.allprojects {

    apply plugin: 'maven-publish'

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    pluginManager.withPlugin('java') {
        java {
            withJavadocJar()
            withSourcesJar()
        }


        publishing {
            publications.create("maven${project.name}", MavenPublication) {
                from components.java
                groupId = "${groupIdPrefix}.com.google.cloud.verticals.foundations.dataharmonization.plugins"
            }
        }

        tasks.withType(Javadoc) {
            // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.javadoc.Javadoc.html#org.gradle.api.tasks.javadoc.Javadoc:failOnError
            // https://stackoverflow.com/questions/35435173/prevent-javadoc-from-failing-gradle-build#answer-59892052
            failOnError false
        }
    }

    // TODO: not sure why this is needed for this project but not the test one.
    // Adding it to the test one anyway to make sure the POM is valid.
    pluginManager.withPlugin('java-library') {
        project.dependencies {
            api group: "com.google.cloud.verticals.foundations.dataharmonization", name: "runtime", version: "${version}"
        }
    }

}